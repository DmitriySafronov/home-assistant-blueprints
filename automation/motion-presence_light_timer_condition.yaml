blueprint:
  name: Motion-activated (presense) Light with Timer and Condition
  description: Turn on a light when motion is detected and turn it off when "no-motion" timer finishes on specific condifion
  domain: automation
  source_url: https://github.com/DmitriySafronov/home-assistant-blueprints/blob/master/automation/motion-presense_light_timer_condition.yaml
  input:
    entity_trigger:
      name: Motion Sensor
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
          multiple: false
    entity_presence:
      name: Presence Sensor
      selector:
        entity:
          domain: binary_sensor
          device_class: presence
          multiple: false
    entity_condition:
      name: Condition
      selector:
        entity:
          domain:
            - binary_sensor
            - input_boolean
          multiple: false
    entity_target:
      name: Light
      selector:
        entity:
          domain: light
          multiple: false
    timer_no_motion:
      name: Wait timer
      description: Time to leave the light on after last motion is detected.
      selector:
        entity:
          domain: timer
          multiple: false

# If motion is detected within the delay,
# we restart the script.
mode: restart
max_exceeded: silent

trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_no_motion
    id: timer
  - platform: state
    entity_id:
      - !input entity_trigger
    id: motion
  - platform: state
    entity_id:
      - !input entity_target
    id: light
  - platform: state
    entity_id:
      - !input entity_presence
    id: presence

condition:
  - condition: state
    entity_id: !input entity_condition
    state: "on"

action:
  - choose:
      - conditions:
          - condition: trigger
            id: timer
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input entity_target
      - conditions:
          - condition: trigger
            id: motion
          - condition: state
            entity_id: !input entity_trigger
            state: "on"
          - condition: state
            entity_id: !input entity_target
            state: "off"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input entity_target
      - conditions:
          - condition: trigger
            id: motion
          - condition: state
            entity_id: !input entity_trigger
            state: "on"
          - condition: state
            entity_id: !input entity_target
            state: "on"
          - condition: state
            entity_id: !input timer_no_motion
            state: "active"
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input timer_no_motion
      - conditions:
          - condition: trigger
            id: motion
          - condition: state
            entity_id: !input entity_trigger
            state: "off"
          - condition: state
            entity_id: !input entity_target
            state: "on"
          - condition: state
            entity_id: !input entity_presence
            state: "off"
        sequence:
          - service: timer.start
            target:
              entity_id: !input timer_no_motion
      - conditions:
          - condition: trigger
            id: light
          - condition: state
            entity_id: !input entity_target
            state: "on"
          - condition: state
            entity_id: !input entity_presence
            state: "off"
          - condition: template
            value_template: "{{ trigger.to_state.context.parent_id == none }}"
        sequence:
          - service: timer.start
            target:
              entity_id: !input timer_no_motion
      - conditions:
          - condition: trigger
            id: light
          - condition: state
            entity_id: !input entity_target
            state: "off"
          - condition: state
            entity_id: !input timer_no_motion
            state: "active"
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input timer_no_motion
      - conditions:
          - condition: trigger
            id: presence
          - condition: state
            entity_id: !input entity_presence
            state: "on"
          - condition: state
            entity_id: !input entity_target
            state: "on"
          - condition: state
            entity_id: !input timer_no_motion
            state: "active"
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input timer_no_motion
      - conditions:
          - condition: trigger
            id: presence
          - condition: state
            entity_id: !input entity_presence
            state: "off"
          - condition: state
            entity_id: !input entity_target
            state: "on"
        sequence:
          - service: timer.start
            target:
              entity_id: !input timer_no_motion
